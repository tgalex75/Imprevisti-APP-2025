

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."bonus-annuali" (
    "id" smallint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "public"."bonus-annuali" OWNER TO "postgres";


ALTER TABLE "public"."bonus-annuali" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."bonus-annuali_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."imprevisti" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "titolo" "text",
    "descrizione" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "ultEstrazione" boolean,
    "qtGiocatori" smallint DEFAULT '0'::smallint,
    "titolariRosa" smallint DEFAULT '30'::smallint
);


ALTER TABLE "public"."imprevisti" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."registroimprevisti" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "title" "text" NOT NULL,
    "quantity" smallint,
    "user_id" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."registroimprevisti" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."registroo" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "tipo" "text",
    "user_id" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."registroo" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."saldo-punti" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "punti" real NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."saldo-punti" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."salvaxdopo" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "titolo" "text",
    "descrizione" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."salvaxdopo" OWNER TO "postgres";


ALTER TABLE ONLY "public"."imprevisti"
    ADD CONSTRAINT "imprevisti_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."registroimprevisti"
    ADD CONSTRAINT "registroimprevisti_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."registroo"
    ADD CONSTRAINT "registroo_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."saldo-punti"
    ADD CONSTRAINT "saldo-punti_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."salvaxdopo"
    ADD CONSTRAINT "salvaxdopo_pkey" PRIMARY KEY ("id");



CREATE POLICY "Enable delete for users based on user_id" ON "public"."bonus-annuali" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."imprevisti" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."registroimprevisti" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."registroo" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."salvaxdopo" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."salvaxdopo" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."bonus-annuali" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."imprevisti" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."registroimprevisti" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."registroo" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for users based on user_id" ON "public"."imprevisti" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for users based on user_id" ON "public"."registroimprevisti" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for users based on user_id" ON "public"."saldo-punti" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."bonus-annuali" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."imprevisti" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."registroimprevisti" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."registroo" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."saldo-punti" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Select for auth only" ON "public"."salvaxdopo" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."bonus-annuali" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."imprevisti" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."registroimprevisti" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."registroo" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."saldo-punti" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."salvaxdopo" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



































































































































































































GRANT ALL ON TABLE "public"."bonus-annuali" TO "anon";
GRANT ALL ON TABLE "public"."bonus-annuali" TO "authenticated";
GRANT ALL ON TABLE "public"."bonus-annuali" TO "service_role";



GRANT ALL ON SEQUENCE "public"."bonus-annuali_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."bonus-annuali_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."bonus-annuali_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."imprevisti" TO "anon";
GRANT ALL ON TABLE "public"."imprevisti" TO "authenticated";
GRANT ALL ON TABLE "public"."imprevisti" TO "service_role";



GRANT ALL ON TABLE "public"."registroimprevisti" TO "anon";
GRANT ALL ON TABLE "public"."registroimprevisti" TO "authenticated";
GRANT ALL ON TABLE "public"."registroimprevisti" TO "service_role";



GRANT ALL ON TABLE "public"."registroo" TO "anon";
GRANT ALL ON TABLE "public"."registroo" TO "authenticated";
GRANT ALL ON TABLE "public"."registroo" TO "service_role";



GRANT ALL ON TABLE "public"."saldo-punti" TO "anon";
GRANT ALL ON TABLE "public"."saldo-punti" TO "authenticated";
GRANT ALL ON TABLE "public"."saldo-punti" TO "service_role";



GRANT ALL ON TABLE "public"."salvaxdopo" TO "anon";
GRANT ALL ON TABLE "public"."salvaxdopo" TO "authenticated";
GRANT ALL ON TABLE "public"."salvaxdopo" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
